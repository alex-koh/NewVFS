package com.mercdev.newvfs.fs;

import com.mercdev.newvfs.server.Account;

/**
 * Created with IntelliJ IDEA.
 * User: alex
 * Date: 2/26/14
 * Time: 12:58 PM
 * To change this template use File | Settings | File Templates.
 */

/**
 * Интерфейс описывает один из узлов, входящих в путь к файлу.
 * Путь представляет связанный список узлов.
 * Каждый узел знает о своеём предшественнике и может выполнять операции с
 * файлами. Путь начинается в корневом каталоге.
 * Не все узлы в пути могут ссылаться на существующие файлы.
 */
public interface PathNode {
	/**
	 * Существование
	 * @return если файл существует, то true
	 */
	boolean isExist();

	/**
	 * Директория
	 * @return Если это директория, то true
	 * (если файл не существует, то значение не определено)
	 */
	boolean isDirectory();

	/**
	 * Файл
	 * @return Если это файл, то true
	 * (если файл не существует, то значение не определено)
	 */
	boolean isFile();

	/**
	 * Проверка блокировки
	 * @return Если файл разблокирован, тогда true
	 * (если файл не существует, то значение не определено)
	 */
	boolean isUnLock();

	/**
	 * Имя файла
	 * @return имя файла (вне зависимости от его существования)
	 */
	String getName();

	/**
	 * Поиск узла с файлом-потомком
	 * @param name имя искомого файла
	 * @return Возвращает узел, указывающий на искомый файл. Если его найти не
	 * удалось, то возвращает узел, указывающий на несуществующий файл. Также
	 * возвращает узел с пустым файлом если исходная директория не ссылается
	 * на файл или не является директорией.
	 */
	PathNode find(String name);

	/**
	 * Вернуть перечисление всех потомков
	 * @return перечисление узлов
	 */
	Iterable<PathNode> getChildren();

	/*TODO
	 * Возвращает узел, указывающий на родительский каталог
	 * (вне зависимости от его существования и существования самого файла)
	 * @return узел
	 */
	//PathNode getParrent();

	/**
	 * Удаление файла
	 * @return Если операция прошла успешно, то возвращает true
	 */
	boolean remove();

	/**
	 * Создание новую директорию, соответствующий данному пути.
	 * @return Если операция прошла успешно, то вернёт true
	 */
	boolean mkDir(FileMaker maker);

	/**
	 * Создание нового файла, соответствующий данному пути.
	 * @return Если операция прошла успешно, то вернёт true
	 */
	boolean mkFile(FileMaker maker);

	/**
	 * Попытаться блокировать файл
	 * @param c Клиент, блокирующий файл
	 * @return если успех, то true
	 */
	boolean lock(Account c);

	/**
	 * Попытаться разблокировать файл
	 * @param c Клиент, блокирующий файл
	 * @return если успех, то true
	 */
	boolean unlock(Account c);
}